      <View styleName="fill-parent vertical h-center v-start" paddingTop={50}>
        <Title>HabiBuddy</Title>
      </View>

              <Heading
          style={{ paddingBottom: 20, color: "gold", textAlign: "center" }}
        >
          EXP: {this.state.exp}
        </Heading>
        <Button
          onPress={this._onPressExpUp}
          styleName="secondary"
          style={{ width: 100 }}
        >
          <Text>Add EXP</Text>
        </Button>
        <Button
          onPress={this._resetExpDebug}
          styleName="secondary"
          style={{ width: 200, top: 50 }}
        >
          <Text>Reset EXP</Text>
        </Button>


            const pastSessions = [
      {
        type: "Gaspar Brasserie",
        date: "185 Sutter St, San Francisco, CA 94109"
      },
      {
        type: "Chalk Point Kitchen",
        date: "527 Broome St, New York, NY 10013"
      },
      {
        type: "Gaspar Brasserie",
        date: "185 Sutter St, San Francisco, CA 94109"
      }
    ];





      completeSession = async () => {
    let parsed = null;
    let date = new Date();

    try {
      let pastSessions = await AsyncStorage.getItem("pastSessions");
      parsed = JSON.parse(pastSessions);

      if (parsed != null) {
        parsed.push({
          type: this.state.session,
          date: date.toLocaleDateString()
        });
      } else {
        parsed = new Array(1);
        parsed[0] = {
          type: this.state.session,
          date: date.toLocaleDateString()
        };
      }
    } catch (error) {
      alert(error);
    }

    AsyncStorage.setItem("pastSessions", JSON.stringify(parsed));

    this.setState({ session: "NONE" });
    this.setState({ pastSessions: parsed });
  };


                style={{
                borderRadius: 60,
                borderWidth: 2,
                textAlign: "center",
                borderColor: "#969696"
              }}

        let result = await Permissions.askAsync(Permissions.NOTIFICATIONS);
    if (Constants.lisDevice && resut.status === "granted") {
      console.log("Notification permissions granted.");
    }


    import { Notifications, Permissions, Constants } from "expo";

    const localNotification = {
      title: "test",
      body: "hello world", // (string) — body text of the notification.
      ios: {
        // (optional) (object) — notification configuration specific to iOS.
        sound: true // (optional) (boolean) — if true, play a sound. Default: false.
      },
      // (optional) (object) — notification configuration specific to Android.
      android: {
        sound: true, // (optional) (boolean) — if true, play a sound. Default: false.
        //icon (optional) (string) — URL of icon to display in notification drawer.
        //color (optional) (string) — color of the notification icon in notification drawer.
        priority: "high", // (optional) (min | low | high | max) — android may present notifications according to the priority, for example a high priority notification will likely to be shown as a heads-up notification.
        sticky: false, // (optional) (boolean) — if true, the notification will be sticky and not dismissable by user. The notification must be programmatically dismissed. Default: false.
        vibrate: true // (optional) (boolean or array) — if true, vibrate the device. An array can be supplied to specify the vibration pattern, e.g. - [ 0, 500 ].
        // link (optional) (string) — external link to open when notification is selected.
      }
    };


        let t = new Date();
    t.setSeconds(t.getSeconds() + 10);
    const schedulingOptions = {
      time: t // (date or number) — A Date object representing when to fire the notification or a number in Unix epoch time. Example: (new Date()).getTime() + 1000 is one second from now.
    };

    Notifications.scheduleLocalNotificationAsync(
      localNotification,
      schedulingOptions
    );